#!/bin/bash
# Script to rollback to a previous version of the application

set -e

# Default values
DEPLOYMENT_DIR="/opt/credtech-xscore"
ROLLBACK_TAG=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --dir|-d)
      DEPLOYMENT_DIR="$2"
      shift 2
      ;;
    --tag|-t)
      ROLLBACK_TAG="$2"
      shift 2
      ;;
    --help|-h)
      echo "Usage: $0 [--dir|-d <deployment_directory>] [--tag|-t <rollback_tag>]"
      echo "  --dir, -d: Directory to deploy to. Default: /opt/credtech-xscore"
      echo "  --tag, -t: Docker image tag to rollback to. Required."
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Check if rollback tag is provided
if [ -z "$ROLLBACK_TAG" ]; then
  echo "Error: Rollback tag is required"
  echo "Usage: $0 [--dir|-d <deployment_directory>] --tag|-t <rollback_tag>"
  exit 1
fi

echo "Rolling back to version: $ROLLBACK_TAG"
echo "Deployment directory: $DEPLOYMENT_DIR"

# Check if deployment directory exists
if [ ! -d "$DEPLOYMENT_DIR" ]; then
  echo "Error: Deployment directory does not exist"
  exit 1
fi

# Check if docker-compose.yml exists
if [ ! -f "$DEPLOYMENT_DIR/docker-compose.yml" ]; then
  echo "Error: docker-compose.yml not found in deployment directory"
  exit 1
fi

# Check if .env.deployment exists
if [ ! -f "$DEPLOYMENT_DIR/.env.deployment" ]; then
  echo "Error: .env.deployment not found in deployment directory"
  exit 1
fi

# Create backup of current .env file
if [ -f "$DEPLOYMENT_DIR/.env" ]; then
  cp "$DEPLOYMENT_DIR/.env" "$DEPLOYMENT_DIR/.env.backup.$(date +%Y%m%d%H%M%S)"
fi

# Create .env file with registry and image information
cat > "$DEPLOYMENT_DIR/.env" << EOF
# Generated by rollback.sh on $(date)
REGISTRY=\${REGISTRY:-ghcr.io}
IMAGE_NAME=\${IMAGE_NAME:-credtech/credtech-xscore}
IMAGE_TAG=$ROLLBACK_TAG
EOF

# Merge .env.deployment with .env
cat "$DEPLOYMENT_DIR/.env.deployment" >> "$DEPLOYMENT_DIR/.env"

# Pull rollback images
cd "$DEPLOYMENT_DIR"
echo "Pulling rollback images..."
docker-compose pull

# Stop and remove existing containers
echo "Stopping existing containers..."
docker-compose down || true

# Start rollback containers
echo "Starting rollback containers..."
docker-compose up -d

echo "Rollback completed successfully"